{"name":"Import character sheet","type":"script","author":"N5qRO5fpXV0GPYuq","img":"icons/svg/dice-target.svg","scope":"global","command":"let url = \"https://character-sheets.appspot.com/shinobigami/display?ajax=1&key=\"\nlet path = \"worlds/\" + game.world.id + \"/\";\n\nconst getText = (data) => (data != null) ? data : \"\"\n\nconst createCharacter = async function(json, img) {\n\n  let data = {\n    talent: {},\n    details: {\n      age: getText(json.base.age),\n      sex: getText(json.base.sex),\n      purpose: getText(json.base.stylerule),\n      identify: getText(json.base.cover),\n      belief: getText(json.base.belief),\n      exp: (getText(json.base.exp) == \"\") ? 0 : getText(json.base.exp),\n      expContent: \"\",\n      biography: getText(json.base.memo).replace(/\\r?\\n/g, '<br>')\n    }\n  }\n\n  if (json.base.race == \"1\") {\n    data.details.agency = json.base.upperstyle;\n    data.details.grade = getText(json.base.level)\n\n    if (data.details.agency == \"a\") {\n      data.details.agency = \"斜歯忍軍\";\n      data.talent.curiosity = 1;\n      data.talent.gap = {\"1\": true};\n    } else if (data.details.agency == \"ab\") {\n      data.details.agency = \"鞍馬神流\"\n      data.talent.curiosity = 2;\n      data.talent.gap = {\"1\": true, \"2\": true};\n    }\n    else if (data.details.agency == \"bc\") {\n      data.details.agency = \"ハグレモノ\"\n      data.talent.curiosity = 3;\n      data.talent.gap = {\"2\": true, \"3\": true};\n    }\n    else if (data.details.agency == \"cd\") {\n      data.details.agency = \"比良坂機関\"\n      data.talent.curiosity = 4;\n      data.talent.gap = {\"3\": true, \"4\": true};\n    }\n    else if (data.details.agency == \"de\") {\n      data.details.agency = \"私立御斎学園\"\n      data.talent.curiosity = 5;\n      data.talent.gap = {\"4\": true, \"5\": true};\n    }\n    else if (data.details.agency == \"e\") {\n      data.details.agency = \"隠忍の血統\"\n      data.talent.curiosity = 6;\n      data.talent.gap = {\"5\": true, \"6\": true};\n    }\n\n\n  }\n\n  data.talent.table = [ \n      [{\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}],\n      [{\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}], \n      [{\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}], \n      [{\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}], \n      [{\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}], \n      [{\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}, {\"state\": false, \"num\": 12, \"stop\": false}] \n  ];\n  for (skill of json.learned) {\n    if (skill.id == null)\n      continue;\n\n    splited = skill.id.split(\".\")\n    row = +splited[1].split(\"row\")[1]\n    name = +splited[2].split(\"name\")[1]\n\n    data.talent.table[name][row].state = true;\n  }\n\n  let actorData = {\n    name: json.base.name,\n    type: (json.base.race == \"1\") ? \"character\" : \"commoner\",\n    data: data\n  }\n\n  if (img) {\n    if(json.images){\n      if (typeof ForgeVTT != \"undefined\" && ForgeVTT.usingTheForge) {\n          source = \"forgevtt\";\n      }\n      const type= json.images.uploadImage.match(/image\\/.+?(?=;)/)[0];\n      const extension = type.match(/(?<=image\\/)(.*)/)[0];\n      const bin = atob(json.images.uploadImage.replace(/^.*,/, ''));\n      const buffer = new Uint8Array(bin.length).map((_,x)=>bin.charCodeAt(x));\n      let file = new File([buffer.buffer], (name + '.' + extension), {type: type});\n      let source = \"data\";\n      response = await FilePicker.upload(source, path, file, {});\n      actorData.img = response.path;\n      if(!response) {\n          ui.notifications.warn(\"An image upload error has occurred. Instead, store images in base64 format in the character data. This causes bloating of character data and slower browser loading speeds.\");\n          console.warn(\"An image upload error has occurred. Instead, store images in base64 format in the character data. This causes bloating of character data and slower browser loading speeds.\");\n          actorData.img = json.images.uploadImage;\n      }\n    }    \n  }\n\n\n\n\n  let actor = await Actor.create(actorData);\n  let formData = {}\n  formData[`data.talent.table.0.0.state`] = data.talent.table[0][0].state;\n  await actor.update(formData);\n\n  let items = []\n  for (let ability of json.ninpou) {\n    if (ability.name == null)\n      continue;\n\n    const abilityData = {\n      name: ability.name,\n      type: \"ability\",\n      data: {\n        type: getText(ability.type),\n        gap: getText(ability.range),\n        cost: getText(ability.cost),\n        talent: getText(ability.targetSkill),\n        hidden: (ability.secret != null) ? true : false,\n        description: getText(ability.effect)  + \"(\" + getText(ability.page) + \")\"\n      }\n    }\n\n    items.push(abilityData)\n  }\n\n  for (let background of json.background) {\n    if (background.name == null)\n      continue;\n\n    const backgroundData = {\n      name: background.name,\n      type: \"background\",\n      data: {\n        type: (background.type == \"長所\") ? \"pros\" : \"cons\",\n        exp: getText(background.point),\n        description: getText(background.effect)\n      }\n    }\n\n    items.push(backgroundData)\n  }\n\n  for (let bond of json.personalities) {\n    if (bond.name == null)\n      continue;\n\n    let bondData = {\n      name: bond.name,\n      type: \"bond\",\n      data: {\n        residence: (bond.place != null) ? true : false,\n        secret: (bond.secret != null) ? true : false,\n        finish: (bond.specialEffect != null) ? true : false\n      }\n    }\n\n    let emotion = bond.emotion;\n    let direction = bond.direction;\n\n    if (direction == \"1\") {\n      if (emotion == \"1\")\n        bondData.data.feeling = \"1:共感\";\n      if (emotion == \"2\")\n        bondData.data.feeling = \"2:友情\";\n      if (emotion == \"3\")\n        bondData.data.feeling = \"3:愛情\";\n      if (emotion == \"4\")\n        bondData.data.feeling = \"4:忠誠\";\n      if (emotion == \"5\")\n        bondData.data.feeling = \"5:憧憬\";\n      if (emotion == \"6\")\n        bondData.data.feeling = \"6:狂信\";\n    } else {\n      if (emotion == \"1\")\n        bondData.data.feeling = \"1:不信\";\n      if (emotion == \"2\")\n        bondData.data.feeling = \"2:怒り\";\n      if (emotion == \"3\")\n        bondData.data.feeling = \"3:妬み\";\n      if (emotion == \"4\")\n        bondData.data.feeling = \"4:侮蔑\";\n      if (emotion == \"5\")\n        bondData.data.feeling = \"5:劣等感\";\n      if (emotion == \"6\")\n        bondData.data.feeling = \"6:殺意\";\n    }\n\n    items.push(bondData)\n  }\n\n  await actor.createEmbeddedDocuments('Item', items, {});\n}\n\n\n\nconst getData = async function(key, img) {\n  $.ajax({\n      type: \"GET\",\n      url: url + key,\n      dataType: 'jsonp',\n      data:{base64Image:1},\n      success: function(resp) {\n        console.log(resp)\n        createCharacter(resp, img)\n      }\n  });\n}\n\nDialog.prompt({\n  title: \"キャラクター登録サイト\",\n  content: `\n    <h2>キャラクター登録サイト <span style=\"float:right;\">Img: <input id=\"cImg\" type=\"checkbox\" /></span></h2>\n    <input\n      id='cId'\n      placeholder='https://character-sheets.appspot.com/shinobigami/edit.html?key='\n      style='width: 100%'\n    />\n  `,\n  label: \"キャラクター登録サイト\",\n  render: () => $(\"#cId\").focus(),\n  callback: async () => {\n    const input = $(\"#cId\").val().trim();\n    const key = input.split(\"key=\")[1];\n    const img = $(\"#cImg\").is(\":checked\");\n\n    if (key == undefined) {\n      console.warn(\"URL error\");\n      return;\n    }\n\n    getData(key, img)\n  }\n\n\n});","folder":null,"sort":0,"permission":{"default":0,"N5qRO5fpXV0GPYuq":3},"flags":{"core":{"sourceId":"Macro.ClyAObP1xT4VbLZ4"}},"_id":"Hx94XGa3Tu6inYkN"}
